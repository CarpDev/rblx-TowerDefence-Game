--Variables-- too many
local player = game:GetService("Players")
local localPlayer = player.LocalPlayer
local silver = player.LocalPlayer:WaitForChild("Silver")
local UIS = game:GetService('UserInputService')
local towerToSpawn = nil
local RunSrv = game:GetService("RunService")
local gui = script.Parent
local RS = game:GetService("ReplicatedStorage")
local events = RS:WaitForChild("Events")
local functions = RS:WaitForChild("Functions")
local requesttower = functions:WaitForChild("RequestTower")
local towers = RS:WaitForChild("Towers")
local cam = workspace.CurrentCamera
local rotation = 0
local modules = RS:FindFirstChild("Modules")
local guistats = gui.Info.Stats
local moneygui = guistats.Silver
local wave = guistats.Wave
local waveNum = workspace.Info:WaitForChild("Wave")
local message = gui.Info.Message
local messageText = workspace.Info:WaitForChild("Message")
local info = workspace:WaitForChild("Info")
local maxTowers = 10
local towerSpawnfunction = functions:WaitForChild("SpawnTower")
local sellTower = functions:WaitForChild("sellTower")
local changeModeFunction = functions:WaitForChild("changeTowerMode")
local hoveredinstance = nil
local towerplaced = player.LocalPlayer:WaitForChild("placedTowers")
local selectedtower = nil
local playerItems = player.LocalPlayer:WaitForChild("Items")
local inv = gui.playerInventory.Inventory
-- now all the functions  


local function updatehealthGUI()
	local currenthealth = info.BaseHealth.Value
	local maxHealth = info.MaxBaseHealth.Value
	local per = currenthealth / maxHealth
		gui.Info.Health.CurrentHealth.Size = UDim2.new(math.max(per, 0), 0, 1, 0)
	if currenthealth > 0 then
		gui.Info.Health.TextLabel.Text = "Base:" .. currenthealth .. "/" .. maxHealth
	else
		gui.Info.Health.TextLabel.Text = "Base: Destroyed"
	end
end

updatehealthGUI()
info.BaseHealth.Changed:Connect(updatehealthGUI)

local function updateMessage()
	message.Text = messageText.Value
	if message.Text == "" then
		message.Visible = false
	else
		message.Visible = true
	end
end

updateMessage()
messageText.Changed:Connect(updateMessage)

local function updateWave()
	wave.Text = "Wave:" .. waveNum.Value
end
updateWave()
waveNum.Changed:Connect(updateWave)


local function round(n)
	return math.floor(n + 0.5)
end

local function updateSilver()
	if silver.Value/1000000 >=1 then
		local M = silver.Value/1000000
		moneygui.Text = "¥" .. M .. "M"
	elseif silver.Value/1000 >=1 then
		local K = silver.Value/1000
		moneygui.Text = "¥" .. K .. "K"
	else
		moneygui.Text = "¥" .. silver.Value
		
	end
end
	
updateSilver()
silver.Changed:Connect(updateSilver)

local function updateTowerNum()
	gui:WaitForChild("TowerColumn").TowerNum.Text = "Towers:" .. towerplaced.Value .. "/" .. maxTowers
	
end

updateTowerNum()
player.LocalPlayer:WaitForChild("placedTowers").Changed:Connect(updateTowerNum)


local function mouseRaycast(model)
	local mousePos = UIS:GetMouseLocation()
	local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
	
	local blacklist = workspace.Camera:GetChildren()
	table.insert(blacklist, model)
	local raycastParams = RaycastParams.new()
	raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
	raycastParams.FilterDescendantsInstances = blacklist
	
	local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
	
	return raycastResult	
end

local function RemovePlaceHolder()
	if towerToSpawn then
		towerToSpawn:Destroy()
		towerToSpawn = nil
		rotation = 0
		gui.Controls.Visible = false
	end
end

canPlace = false


local function createcirncle(tower, placeholder)
	local range = tower.Config.Range.Value
	local height = (tower.PrimaryPart.Size.Y / 2) + tower.Humanoid.HipHeight
	local offset = CFrame.new(0, -height, 0)
	local part = Instance.new("Part")
	part.Name = "RangeCirncle"
	part.Shape = Enum.PartType.Cylinder
	part.Material = Enum.Material.ForceField
	part.Size = Vector3.new(1, range * 2, range *2)
	part.TopSurface = Enum.SurfaceType.Smooth
	part.BottomSurface = Enum.SurfaceType.Smooth
	part.CFrame = tower.PrimaryPart.CFrame * offset * CFrame.Angles(0, 0, math.rad(90))
	part.CanCollide = false
	if placeholder then
		part.Anchored = false
		local weld = Instance.new("WeldConstraint")
		weld.Part0 = part
		weld.Part1 = tower.PrimaryPart
		weld.Parent = part
		part.Parent = tower
	else
		part.Anchored = true
		part.Parent = workspace.Camera			
	end	
end

local function AddPlaceholderTower(name)
	local TowerExists = towers:FindFirstChild(name)
	if TowerExists then
		towerToSpawn = TowerExists:Clone()
		towerToSpawn.Parent = workspace
		createcirncle(towerToSpawn, true)
		for i, object in ipairs(towerToSpawn:GetDescendants()) do
			if object:IsA("BasePart") or object:IsA("MeshPart")  then
				object.CollisionGroup = "Tower"	
				object.Material = Enum.Material.ForceField			
				
			end
		end
	end
	gui.Controls.Visible = true
end

local function colorPlaceHolderTower(color)
	for i, object in ipairs(towerToSpawn:GetDescendants()) do
		if object:IsA("BasePart") or object:IsA("MeshPart") then
			object.Color = color
		end
	end
end

gui.playerInventory.OpenSesame.Activated:Connect(function()
	inv.Visible = true
	gui.playerInventory.CloseInv.Visible = true
	gui.playerInventory.OpenSesame.Visible = false
end)

gui.playerInventory.CloseInv.Activated:Connect(function()
	inv.Visible = false
	gui.playerInventory.OpenSesame.Visible = true
	gui.playerInventory.CloseInv.Visible = false
end)


for i,item in pairs(playerItems:GetChildren()) do
	if item:IsA("Part") then
		local itemButton = gui.playerInventory.Inventory.ButtonTemplate:Clone()
		itemButton.Name = item.Name
		itemButton.Parent = gui.playerInventory.Inventory	
		
	end

end

for i,tower in pairs(towers:GetChildren()) do
		if tower:IsA("Model") then
			local button = gui.TowerColumn.TowerList.Button:Clone()
			button.Name = tower.Name
			button.Parent = gui.TowerColumn.TowerList
			local config = tower:WaitForChild("Config")
			button.Image = config.Image.Texture
			button.Visible = true
			button.Price.Text = tower.Name .. ":" .. config.Price.Value
			button.LayoutOrder = config.Price.Value

			button.Activated:Connect(function()
				local allowedtoSpawn = requesttower:InvokeServer(tower.Name)
				if allowedtoSpawn then
				AddPlaceholderTower(tower.Name)
			end
		end)
	end
end

local function toggletowerinfo()
	workspace.Camera:ClearAllChildren()
	updateTowerNum()
	
	if selectedtower then
		createcirncle(selectedtower)
		local towerselect = gui.TowerSelect
		towerselect.Visible = true
		towerselect.TowerName.Text = selectedtower.Name
		towerselect.Stats.Attack.Num.Text = selectedtower.Config.Damage.Value
		towerselect.Stats.Range.Num.Text = selectedtower.Config.Range.Value
		towerselect.Stats.Cooldown.Num.Text = selectedtower.Config.Cooldown.Value
		
		if selectedtower.Config.Owner.Value == localPlayer.Name then
			towerselect.Action.Visible = true
			local modes = {
				["Near"] = "rgb(255, 165, 20)",  
				["First"] = "rgb(0, 255, 128)",
				["Last"] = "rgb(255, 223, 96)",
				["Strong"] = "rgb(200, 17, 0)",
				["Weak"] = "rgb(66, 189, 255)"
			}
			local color = modes[selectedtower.Config.TargetMode.Value]
			towerselect.Action.Settings.Target.Text = "Target: <font color=\"" .. color .. "\">" .. selectedtower.Config.TargetMode.Value .. "</font>"
			
			towerselect.Action.Sell.TextLabel.Text = "Sell(¥" .. selectedtower.Config.Price.Value/2 .. ")"
			local upgradeTower = selectedtower.Config:FindFirstChild('Upgrade')
			if upgradeTower then
				towerselect.Action.Upgrade.Visible = true
				towerselect.Action.Upgrade.PRICE.Text = "Upgrade (¥" .. upgradeTower.Value.Config.Price.Value .. ")"
			else
				towerselect.Action.Upgrade.Visible = false

			end
			
		else
			towerselect.Action.Visible = false
	
		end
	end
	
end

local function summonTower()
	if canPlace then

		local placedTower = towerSpawnfunction:InvokeServer(towerToSpawn.Name, towerToSpawn.PrimaryPart.CFrame)
		RemovePlaceHolder()
		if placedTower then
			localPlayer.placedTowers.Value = towerplaced.Value
			toggletowerinfo()
		end
	end
end

gui.TowerSelect.Action.Settings.Activated:Connect(function()
	if selectedtower then
		local changeModeSuccess = changeModeFunction:InvokeServer(selectedtower)
		if changeModeFunction then
			toggletowerinfo()
		end
	end
end)

gui.TowerSelect.Action.Upgrade.Activated:Connect(function()
	if selectedtower then
		local upgradetower = selectedtower.Config.Upgrade.Value
		local upgradeW =  towerSpawnfunction:InvokeServer(upgradetower.Name, selectedtower.PrimaryPart.CFrame, selectedtower)
		
		
		if upgradeW then
			selectedtower = upgradeW
			toggletowerinfo()
			
			
		end
	end

end)

gui.Controls.RotateButton.Activated:Connect(function()
	rotation = rotation + 45
end)
gui.Controls.Cancel.Activated:Connect(function()
	RemovePlaceHolder()
end)
gui.TowerSelect.Action.Sell.Activated:Connect(function()
	if selectedtower then
		local soldTower = sellTower:InvokeServer(selectedtower)
		if soldTower then
			
			selectedtower = nil
			gui.TowerSelect.Visible = false
			toggletowerinfo()
			
		end
	end
end)



UIS.InputBegan:Connect(function(input, processed)
	if processed then 
		return 
	end
	workspace.Camera:ClearAllChildren()
	if towerToSpawn then
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			summonTower()
			
		elseif input.KeyCode == Enum.KeyCode.X then
			RemovePlaceHolder()
			

		elseif input.KeyCode == Enum.KeyCode.R then
			rotation = rotation + 45
			
		else
			
	end 
	
		
	elseif hoveredinstance and input.UserInputType == Enum.UserInputType.MouseButton1 then
		local model = hoveredinstance:FindFirstAncestorOfClass("Model")
		
		if model and model.Parent == workspace.Towers then
			selectedtower = model
			toggletowerinfo()
			
		else 
			selectedtower = nil	
			gui.TowerSelect.Visible = false
		end
	end
end)
			


RunSrv.RenderStepped:Connect(function()
	local result = mouseRaycast(towerToSpawn)
	if result and result.Instance then
		if towerToSpawn then
			hoveredinstance = nil
			if result.Instance.Parent.Name == "TowerArea" then
				canPlace = true
				colorPlaceHolderTower(Color3.new(0,1,0))
			else
			canPlace = false
				colorPlaceHolderTower(Color3.new(1,0,0))
				
			end
		local x = result.Position.X
		local y = result.Position.Y + towerToSpawn.Humanoid.HipHeight + (towerToSpawn.PrimaryPart.Size.Y/2)
		local z = result.Position.Z
		local cframe = CFrame.new(x,y,z) * CFrame.Angles(0, math.rad(rotation), 0)
			towerToSpawn:SetPrimaryPartCFrame(cframe)
		else
			hoveredinstance = result.Instance
		end
	else
		hoveredinstance = nil
	end
end)